"""
üöÄ –ó–∞–¥–∞—á–∞ 1: –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ–ª–æ—Å–Ω–∏—Ö

–ó–∞–≤–¥–∞–Ω–Ω—è:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Ä–µ—á–µ–Ω–Ω—è.
–ü–æ—Ä–∞—Ö—É–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–ª–æ—Å–Ω–∏—Ö —É —Ü—å–æ–º—É —Ä–µ—á–µ–Ω–Ω—ñ.

‚úî –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ: —Ü–∏–∫–ª for, —ñ–Ω–¥–µ–∫—Å–∏, –º–µ—Ç–æ–¥ lower()
"""
###

user_msg = input("Type the text |=> ")
vowels = [
    'a', '√§', 'e', '√´', 'i', 'o', '√∂', 'u', '√º', 'y', 
    '–∞', '–µ', '—î', '—ë', '–∏', '—ñ', '—ó', '–æ', '—É', '—ã', '—ç', '—é', '—è' 
]

count_vowels = sum(1 for letter in user_msg if letter in vowels)

# count_vowels = 0
# for letter in user_msg:
#     if letter.lower() in vowels:
#         count_vowels += 1

print(f'Count of vowels: {count_vowels}\n')

"""
üó∫Ô∏è –ó–∞–¥–∞—á–∞ 2: –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑

–ó–∞–≤–¥–∞–Ω–Ω—è:
–Ñ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç:
cities = "Berlin, Paris, Rome, Warsaw, Madrid"

‚úî –í–∏–≤–µ–¥–∏ –æ–∫—Ä–µ–º–æ –∫–æ–∂–Ω–µ –º—ñ—Å—Ç–æ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ—Ç–æ–¥ split).

‚úî –ó–Ω–∞–π–¥–∏ –º—ñ—Å—Ç–æ –∑ –Ω–∞–π–¥–æ–≤—à–æ—é –Ω–∞–∑–≤–æ—é (–ø–æ –¥–æ–≤–∂–∏–Ω—ñ —Ä—è–¥–∫–∞).

‚úî –í–∏–≤–µ–¥–∏ –≤—Å—ñ –º—ñ—Å—Ç–∞ –∑ –≤–µ–ª–∏–∫–æ—ó –±—É–∫–≤–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —É —Å–ø–∏—Å–∫—É –≤–æ–Ω–∏ –Ω–∞–ø–∏—Å–∞–Ω—ñ –∑ –º–∞–ª–µ–Ω—å–∫–æ—ó.
"""
###
cities = "Berlin, Paris, rome, warsaw, Madrid"
cities_list = cities.split(', ')
longest_city = ""

print(cities_list)
print(cities.title())

for city in cities_list:
    if len(city) > len(longest_city):
        longest_city = city

print(f'Longest city is: {longest_city}\n')

"""
üìú –ó–∞–¥–∞—á–∞ 3: –Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π —Ç–µ–∫—Å—Ç

–ó–∞–≤–¥–∞–Ω–Ω—è:
–Ñ —Ä—è–¥–æ–∫:
text = "Die Geschichte Europas ist sehr vielf√§ltig und spannend."

‚úî –í–∏–≤–µ–¥–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 15 —Å–∏–º–≤–æ–ª—ñ–≤.

‚úî –ó–∞–º—ñ–Ω—ñ—Ç—å —Å–ª–æ–≤–æ "Europas" –Ω–∞ "der Ukraine".

‚úî –ü—ñ–¥—Ä–∞—Ö—É–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç–µ—Ä e —É –≤—Å—å–æ–º—É —Ç–µ–∫—Å—Ç—ñ.
"""
###
text = "Die Geschichte Europas ist sehr vielf√§ltig und spannend."

print(text[:15])
print(text.replace('Europas', 'der Ukraine'))
print(f'Count of E in [{text}]: {sum(1 for letter in text if letter.lower() == "e")}')

"""
üî¨ –ó–∞–¥–∞—á–∞ 4 (—Å–∫–ª–∞–¥–Ω–∞, –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞): –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º—ñ–≤

–ó–∞–≤–¥–∞–Ω–Ω—è:
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–æ.
–ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —î –≤–æ–Ω–æ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞—î—Ç—å—Å—è –æ–¥–Ω–∞–∫–æ–≤–æ –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ —ñ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ).

‚úî –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑—Ä—ñ–∑–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
"""

user_word = input('Type the word: ').lower().replace(" ", "")

if user_word == user_word[::-1]:
    print(f'The word "{user_word}" is palindrom!')
else:
    print(f'The word "{user_word}" isn`t palindrom!')

"""
‚ú® –ó–∞–¥–∞—á–∞ 5: –û–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –±—É–∫–≤

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ—Ç—Ä—ñ–±–Ω–æ:

    –≤–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏ (—ñ–≥–Ω–æ—Ä—É—é—á–∏ –ø—Ä–æ–±—ñ–ª–∏, —Ü–∏—Ñ—Ä–∏, –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é),

    –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏, —è–∫–∞ –ª—ñ—Ç–µ—Ä–∞ —Ç—Ä–∞–ø–ª—è—î—Ç—å—Å—è –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ,

    –≤–∏–≤–µ—Å—Ç–∏ —ó—ó —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Ö–æ–¥–∂–µ–Ω—å.

üìå –ü–æ—Ä–∞–¥–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π .lower(), .count() —ñ —Ü–∏–∫–ª –ø–æ set().
"""
###



"""
üßÆ –ó–∞–¥–∞—á–∞ 6 (–º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∞): –¶–∏—Ñ—Ä–∏ —É —Ç–µ–∫—Å—Ç—ñ

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –±—É–∫–≤–∏ —Ç–∞ —á–∏—Å–ª–∞.

–ó–∞–≤–¥–∞–Ω–Ω—è:

    –ó–Ω–∞–π–¥–∏ —É—Å—ñ —Ü–∏—Ñ—Ä–∏ –≤ —Ä—è–¥–∫—É.

    –í–∏–≤–µ–¥–∏ —ó—Ö —É –ø–æ—Ä—è–¥–∫—É –ø–æ—è–≤–∏.

    –ó–Ω–∞–π–¥–∏ —Å—É–º—É —Ü–∏—Ö —Ü–∏—Ñ—Ä.

üìå –ü–æ—Ä–∞–¥–∞: —Å–∏–º–≤–æ–ª ‚Äî —Ü–µ —Ü–∏—Ñ—Ä–∞, —è–∫—â–æ char.isdigit() –ø–æ–≤–µ—Ä—Ç–∞—î True.
"""

"""
üß¨ –ó–∞–¥–∞—á–∞ 7 (–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—Å—å–∫–∞): –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–æ—ó

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Ä—è–¥–æ–∫, —è–∫–∏–π –º–∞—î –±—É—Ç–∏ –Ω–∞–∑–≤–æ—é –∑–º—ñ–Ω–Ω–æ—ó –≤ Python.

–ü–µ—Ä–µ–≤—ñ—Ä:

    —á–∏ —Ä—è–¥–æ–∫ –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ü–∏—Ñ—Ä–∏

    —á–∏ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ–±—ñ–ª—ñ–≤ –∞–±–æ —Å–∏–º–≤–æ–ª—ñ–≤ –æ–∫—Ä—ñ–º _ —ñ –±—É–∫–≤

    —á–∏ –Ω–µ —î –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º Python (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: for, while, def‚Ä¶)

üìå –ü–æ—Ä–∞–¥–∞: –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –º–æ–¥—É–ª—è keyword:
"""

"""
üåê –ó–∞–¥–∞—á–∞ 8 (–≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞): –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü—ñ—è –Ω–∞–∑–≤ –º—ñ—Å—Ç

cities = ["Berlin", "kIEv", "Wien", "paris", "MADRID"]

–ó–∞–≤–¥–∞–Ω–Ω—è:

    –ü—Ä–∏–≤–µ–¥–∏ –≤—Å—ñ –Ω–∞–∑–≤–∏ –¥–æ —Ñ–æ—Ä–º–∞—Ç—É: –ø–µ—Ä—à–∞ –ª—ñ—Ç–µ—Ä–∞ –≤–µ–ª–∏–∫–∞, —ñ–Ω—à—ñ ‚Äî –º–∞–ª—ñ.

    –í–∏–≤–µ–¥–∏ –º—ñ—Å—Ç–∞, —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ—Å–Ω—É (A, E, I, O, U).
"""